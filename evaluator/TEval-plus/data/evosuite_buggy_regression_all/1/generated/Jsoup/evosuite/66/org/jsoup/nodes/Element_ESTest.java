/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:51:28 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.StringWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("small");
      document0.appendText("small");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.toggleClass("br");
      element0.toggleClass("br");
      Element element2 = element1.toggleClass("br");
      assertFalse(element2.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("%~z^&F");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("%~z^&F", "%~z^&F", true);
      document0.prependChild(xmlDeclaration0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = new Element("Iwhz^boS");
      // Undeclared exception!
      try { 
        element0.child(368);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 368, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("pBsjG ");
      document0.prependText("pBsjG ");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("p4BsjG ");
      Element element0 = document0.tagName("p4BsjG ");
      assertEquals("p4BsjG ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("p^BsjG ");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("p^BsjG ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("RsG*ra");
      Elements elements0 = document0.getElementsContainingOwnText("RsG*ra");
      assertEquals("RsG*ra", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("r]I/2eL;yoGti2a&-");
      Element element0 = document0.addClass("r]I/2eL;yoGti2a&-");
      assertEquals("r]I/2eL;yoGti2a&-", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("^Yboy");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscaped");
      Element element0 = document0.html("ScriptDataDoubleEscaped");
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataDoubleEscaped", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("RawtextEndTagName");
      Element element0 = document0.attr("RawtextEndTagName", true);
      assertEquals(1, element0.childNodeSize());
      assertEquals("RawtextEndTagName", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsByAttributeValue("br", "br");
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("*j?D");
      document0.getElementsByAttributeValueStarting("*j?D", "*j?D");
      assertEquals(1, document0.childNodeSize());
      assertEquals("*j?D", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("#root", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("oxp");
      // Undeclared exception!
      try { 
        document0.after("oxp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("whEz^boS");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("whEz^boS", "whEz^boS");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, ";;1u`n0k+(`o", attributes0);
      formElement0.getElementsByAttributeStarting(";;1u`n0k+(`o");
      assertEquals(";;1u`n0k+(`o", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("whEz^boS");
      Elements elements0 = document0.getElementsByIndexEquals(1415);
      assertEquals(1, document0.childNodeSize());
      assertEquals("whEz^boS", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("_@^ciq&DRD|IU^");
      Element element0 = document0.val("extended");
      assertEquals("_@^ciq&DRD|IU^", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.getElementsByAttributeValueMatching("class", "class");
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscaped");
      document0.is("ScriptDataDoubleEscaped");
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataDoubleEscaped", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("J");
      document0.getElementsByAttributeValueEnding("J", "J");
      assertEquals("J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element element0 = new Element("<L_, o={N0!&^");
      Elements elements0 = element0.getElementsContainingText("<L_, o={N0!&^");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("w");
      document0.getElementsByAttributeValueContaining("w", "w");
      assertEquals("w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(")lQ=A1\"tK!]");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("CGG$");
      document0.setBaseUri("CGG$");
      assertEquals(1, document0.childNodeSize());
      assertEquals("CGG$", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals("#root", document1.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttributeValueNot("br", "br");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscaped");
      String string0 = document0.toString();
      assertEquals("ScriptDataDoubleEscaped", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("]I/2e;yGi2a&-");
      document0.getElementsByAttribute("]I/2e;yGi2a&-");
      assertEquals(1, document0.childNodeSize());
      assertEquals("]I/2e;yGi2a&-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("S$-Uj0'Xa23Q>(AnP");
      // Undeclared exception!
      try { 
        document0.before("ins");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("\"yw;lW2%L");
      Element element0 = document0.removeClass("\"yw;lW2%L");
      assertEquals("\"yw;lW2%L", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("pBsjG ");
      document0.getAllElements();
      assertEquals("pBsjG ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.selectFirst("Pattern syntax error: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'error:': unexpected token at ':'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("b");
      Element element0 = document0.body();
      element0.append("br");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "S_*{=1an#ht?[t.";
      Document document0 = Document.createShell("S_*{=1an#ht?[t.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document document2 = (Document)document1.appendTo(document0);
      document2.getElementsByIndexLessThan(1691);
      String string1 = null;
      document2.getElementsContainingOwnText(string1);
      Document document3 = document2.normalise();
      document2.hasText();
      Element element0 = document0.toggleClass(string0);
      element0.prependChild(document2);
      String string2 = "Did not find balanced marker at '";
      document3.val(string2);
      document1.html();
      element0.hasText();
      document1.hasText();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("Iz=whz^boS");
      Element element0 = document0.append("z_&M1hdRci//8-}");
      element0.getElementsByIndexGreaterThan(160);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("]I/2e;yGi2a&-");
      document0.prepend("]I/2e;yGi2a&-");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("RsG*ra");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("RsG*ra", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(37, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("whEz^boS");
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-4499), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      Document document1 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("P!vHRk&'`L()");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1615), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("RsG*ra");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(124, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("id", "value");
      FormElement formElement0 = new FormElement(tag0, "character outside of valid range", attributes0);
      String string0 = formElement0.cssSelector();
      assertEquals("#value", string0);
      assertEquals("character outside of valid range", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoulescaped");
      Element element0 = document0.toggleClass("ScriptDataDoulescaped");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("ScriptDataDoulescaped", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.body();
      element0.wrap("#root");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
      assertEquals("#root", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("r]I/2eL;yoGti2a&-");
      document0.siblingElements();
      assertEquals("r]I/2eL;yoGti2a&-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("*j?D");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals("*j?D", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Element element0 = new Element("IJmz^oS");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("r];I/2eL;yoGti2a&-");
      document0.setParentNode(document0);
      document0.nextElementSibling();
      assertEquals("r];I/2eL;yoGti2a&-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("pBsjG ");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals("pBsjG ", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("Iz=whz^boS");
      document0.previousElementSibling();
      assertEquals("Iz=whz^boS", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      document0.setParentNode(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals("r]I/2eL;yoGti2a&-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      document0.setParentNode(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals("r]I/2eL;yoGti2a&-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("br", element1.baseUri());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      document0.setParentNode(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
      assertEquals("r]I/2eL;yoGti2a&-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("|d%(Dsc?AfF?G^|<*n");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      assertEquals("|d%(Dsc?AfF?G^|<*n", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("ScriptDataDoubleEscaped");
      DataNode dataNode0 = new DataNode("ScriptDataDoubleEscaped");
      document0.appendChild(dataNode0);
      Elements elements0 = document0.getElementsMatchingText("4!6Wp/5F ");
      assertEquals("ScriptDataDoubleEscaped", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.title("br");
      document0.appendElement("br");
      document0.getElementsMatchingText("q~");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("pBsjG ");
      document0.title("pBsjG ");
      document0.appendElement("pBsjG ");
      document0.getElementsMatchingText("pBsjG ");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("fIx`m-PYBdyX");
      document0.text("fIx`m-PYBdyX");
      Elements elements0 = document0.getElementsMatchingOwnText("fIx`m-PYBdyX");
      assertEquals(1, document0.childNodeSize());
      assertEquals("fIx`m-PYBdyX", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Comment comment0 = new Comment(".", ".");
      document0.appendChild(comment0);
      document0.getElementsMatchingOwnText(".");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = document0.appendElement("br");
      assertNotSame(element1, element0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertEquals("br", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DataNode dataNode0 = new DataNode("BeforeDoctypePublicIdentifier", "BeforeDoctypePublicIdentifier");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("]I/2e;yGi2a&-");
      document0.append("]I/2e;yGi2a&-");
      document0.getElementsMatchingText("]I/2e;yGi2a&-");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("            ");
      document0.text("            ");
      boolean boolean0 = document0.hasText();
      assertEquals("            ", document0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      document0.title("r]I/2eL;yoGti2a&-");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("r]I/2eL;yoGti2a&-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("whEz^boS");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      DataNode dataNode0 = new DataNode("whEz^boS", "whEz^boS");
      nodeArray0[5] = (Node) dataNode0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.data();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("pBsjG ");
      document0.text("pBsjG ");
      document0.data();
      assertEquals("pBsjG ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("Could not parse attribute query '%s': unexpected token at '%s'");
      document0.toggleClass("Could not parse attribute query '%s': unexpected token at '%s'");
      Elements elements0 = document0.getElementsByClass("Could not parse attribute query '%s': unexpected token at '%s'");
      assertEquals("Could not parse attribute query '%s': unexpected token at '%s'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.toggleClass("Iwhz^boS");
      Elements elements0 = document0.getElementsByClass("Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("_@^ciq&DRD|IU^");
      document0.toggleClass("extended");
      Element element0 = document0.toggleClass("            ");
      element0.getElementsByClass("            ");
      assertEquals("_@^ciq&DRD|IU^", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("whEz^boS");
      Element element0 = document0.toggleClass("whEz^boS");
      document0.toggleClass("+J._&}");
      element0.toggleClass("%oU/f&?");
      Elements elements0 = element0.getElementsByClass("+J._&}");
      assertEquals("whEz^boS", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("whEz^boS");
      document0.toggleClass("whEz^boS");
      document0.toggleClass("character outside of valid range");
      Elements elements0 = document0.getElementsByClass("q~");
      assertEquals(1, document0.childNodeSize());
      assertEquals("whEz^boS", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("whEz^boS");
      document0.toggleClass("whEz^boS");
      document0.toggleClass("whEz^boS");
      Elements elements0 = document0.getElementsByClass("whEz^boS");
      assertEquals("whEz^boS", document0.baseUri());
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("whEz^boS");
      document0.val();
      assertEquals("whEz^boS", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "w", attributes0);
      formElement0.val();
      assertEquals("w", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("whEz^boS", "whEz^boS");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, ";;1u`n0k+(`o", attributes0);
      formElement0.val("textarea");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSiblng");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSiblng", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      String string0 = element0.outerHtml();
      assertEquals("<br><br></br>", string0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "w", attributes0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(mockPrintStream0, 880, document_OutputSettings1);
      assertEquals("w", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Element element0 = new Element("br");
      File file0 = MockFile.createTempFile("checked", (String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(mockFileWriter0, (-1338), document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell("*j?D");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      document0.title("*j?D");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>*j?D</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("*j?D", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("whEz^boS");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      assertEquals("\n<html>\n <head></head>\n <body></body>\n</html>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Element element0 = new Element("whEz^boS");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }
}
