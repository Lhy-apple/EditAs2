/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:45:41 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!-", "<!-");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<![CDATA[", "<![CDATA[");
      assertEquals("<![CDATA[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n <title>M8:V#dCB&lt;GaUB}9#~)</title>\n</head>\n<body>\n M8:V#dCB<gaub 9=\"\">\n </gaub>\n</body>\n</html>", "<html>\n<head>\n <title>M8:V#dCB&lt;GaUB}9#~)</title>\n</head>\n<body>\n M8:V#dCB<gaub 9=\"\">\n </gaub>\n</body>\n</html>");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<?", "<?");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!---->\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "<!--");
      assertEquals("<!--", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("J<9}GQ@<", "J<9}GQ@<");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body> M8VWdB<eaug 9=\"\" k=\"\">\n </eaug>\n</body>\n</html><3~vr={u3gwvy?/&?b>\n</3~vr={u3gwvy?/&?b>", "<html>\n<head>\n</head>\n<body> M8VWdB<eaug 9=\"\" k=\"\">\n </eaug>\n</body>\n</html><3~vr={u3gwvy?/&?b>\n</3~vr={u3gwvy?/&?b>");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<hl=U[_ =SeMe", "<hl=U[_ =SeMe");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<P$<O]G=,U~GJ`", "<P$<O]G=,U~GJ`");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body> M8VWdB<eaug 9=\"\" k=\"\">\n </eaug>\n</body>\n</html><param />", "<html>\n<head>\n</head>\n<body> M8VWdB<eaug 9=\"\" k=\"\">\n </eaug>\n</body>\n</html><param />");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("<title></title>\n<html>\n<head>\n</head>\n<body>\n 5eD#g]gBtk(dHuSN\n</body>\n</html>", "<title></title>\n<html>\n<head>\n</head>\n<body>\n 5eD#g]gBtk(dHuSN\n</body>\n</html>");
      assertEquals("<title></title>\n<html>\n<head>\n</head>\n<body>\n 5eD#g]gBtk(dHuSN\n</body>\n</html>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2</8\"9HK~7x',K-s1", "2</8\"9HK~7x',K-s1");
      assertEquals("#document", document0.nodeName());
  }
}
