/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:48:54 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder("br");
      formElement0.outerHtml(stringBuilder0);
      assertEquals("br<br><br /></br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("ya");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      document0.prependChild(formElement0);
      document0.prepend("ya");
      document0.getElementsMatchingText("br");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(" ");
      // Undeclared exception!
      try { 
        document0.child((-1452192440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element element0 = formElement0.val("textarea");
      element0.getElementsMatchingOwnText("textarea");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("*ez,%b]");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      Elements elements0 = document0.getElementsContainingOwnText("FCf2VK]G^pd");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.addClass("b");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("/");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("*ez,%b]");
      // Undeclared exception!
      try { 
        document0.html("*ez,%b]");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document(" ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("wq", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("t4xta;}RPe1a");
      Elements elements0 = document0.getElementsByAttributeValueStarting("t4xta;}RPe1a", "(OPa3Ui]E{l%0URou5E");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("*\"ebz,%b]");
      // Undeclared exception!
      try { 
        document0.select("*\"ebz,%b]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*\"ebz,%b]': unexpected token at '\"ebz,%b]'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("1");
      // Undeclared exception!
      try { 
        document0.after("1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document(" ");
      Elements elements0 = document0.getElementsByAttributeStarting(" ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Matches");
      Elements elements0 = document0.getElementsByIndexEquals(9424);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document(")&");
      // Undeclared exception!
      try { 
        document0.wrap(")&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("/");
      Element element0 = document0.val("/");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document(" ");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document(")&");
      Elements elements0 = document0.getElementsByAttributeValueMatching(")&", "Tag name must not be empty.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("3L");
      Elements elements0 = document0.getElementsByAttributeValueEnding("3L", "3L");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("h3wd?=*");
      Elements elements0 = document0.getElementsByClass("h3wd?=*");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("iA");
      Elements elements0 = document0.getElementsContainingText("iA");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("^ll{3g%0w9nrxrb");
      Elements elements0 = document0.getElementsByAttributeValueContaining("^ll{3g%0w9nrxrb", "^ll{3g%0w9nrxrb");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("6sc4V/v");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      Elements elements0 = document0.getElementsByAttributeValueNot("FCf2VK]G^pd", "NP");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("ZHb>");
      Elements elements0 = document0.getElementsByAttribute("ZHb>");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      // Undeclared exception!
      try { 
        document0.before("FCf2VK]G^pd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("7s^$<89HK#a<s");
      Element element0 = document0.removeClass("7s^$<89HK#a<s");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("x%o^9o0H))aNZo0d/Wx");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      Elements elements0 = document0.getElementsByTag("FCf2VK]G^pd");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("7ns^$<89HK#a<s");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1791339186));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("YA");
      Element element0 = document0.getElementById("YA");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      Element element0 = document0.prependChild(document0);
      element0.prepend("FCf2VK]G^pd");
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("2V4JLT_t]8");
      Element element0 = document0.appendText("2V4JLT_t]8");
      element0.tagName("2V4JLT_t]8");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      Element element0 = document0.prepend("FCf2VK]G^pd");
      document0.prependChild(element0);
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("h3wd?=*");
      Element element0 = document0.prependChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("YA");
      document0.prepend("YA");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("h3");
      DataNode dataNode0 = new DataNode("textarea", "textarea");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      document0.prepend("FCf2VK]G^pd");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("*\"EBZ,%B]");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(11, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("$r.j vmh*oD]l");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-352), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document(")&");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      Element element0 = document0.insertChildren((-1), linkedHashSet0);
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document(")&");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Matches");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.prependChild(document0);
      assertEquals(0, document0.childNodeSize());
      
      Document document3 = document2.clone();
      document3.prependChild(document1);
      Elements elements0 = document1.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("YA");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("YA");
      FormElement formElement0 = new FormElement(tag0, "YA", attributes0);
      Element element0 = document0.prependChild(formElement0);
      element0.prependChild(document0);
      Element element1 = document0.nextElementSibling();
      assertEquals("ya", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Matches");
      document0.prependChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("YA");
      FormElement formElement0 = new FormElement(tag0, "YA", attributes0);
      Element element0 = formElement0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Matches");
      Document document1 = document0.clone();
      Element element0 = document1.prependChild(document0);
      element0.prependChild(document1);
      Element element1 = document0.previousElementSibling();
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = document0.clone();
      Element element0 = document0.prependChild(document1);
      element0.prependChild(document0);
      Element element1 = document1.firstElementSibling();
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.prependChild(document0);
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document(")&");
      document0.prependElement(")&");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.prependChild(document0);
      document0.empty();
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("FCfb2V;]G^pd@");
      DataNode dataNode0 = DataNode.createFromEncoded("FCfb2V;]G^pd@", "L<@]%FAyU-FGk3eKH");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsMatchingText("FCfb2V;]G^pd@");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document(" ");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("thead");
      FormElement formElement0 = new FormElement(tag0, "thead", attributes0);
      Element element0 = document0.prependChild(formElement0);
      document0.prepend(" ");
      element0.getElementsMatchingText("thead");
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      document0.prependChild(formElement0);
      Element element0 = document0.prepend("ya");
      element0.getElementsMatchingText("br");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("br");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = document0.prependChild(formElement0);
      Elements elements0 = element0.getElementsMatchingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("textarea");
      DocumentType documentType0 = new DocumentType("textarea", "textarea", "textarea", "textarea");
      Element element0 = document0.prependChild(documentType0);
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.getElementsMatchingOwnText("FCf2VK]G^pd");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comment comment0 = new Comment("$r.j vmh*oD]l", "$r.j vmh*oD]l");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("uh$>Cc(@ygZW");
      Element element0 = document0.prependChild(document0);
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document(")&");
      Document document1 = document0.clone();
      document1.append("s");
      document0.prependChild(document1);
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document(" ");
      TextNode textNode0 = new TextNode(" ", " ");
      Element element0 = document0.prependChild(textNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("FCf2VK]G^pd");
      DataNode dataNode0 = new DataNode("FCf2VK]G^pd", "#root");
      Element element0 = document0.prependChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document(")&");
      Document document1 = document0.clone();
      document1.prependChild(document0);
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Matches");
      DataNode dataNode0 = new DataNode("textarea", "N|`r`aT+4T`><-*~G:");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("2V4J(LT_t]8]");
      Element element0 = document0.appendText("2V4J(LT_t]8]");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("h3wd?=*");
      Element element0 = document0.toggleClass("h3wd?=*");
      Elements elements0 = element0.getElementsByClass("h3wd?=*");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.toggleClass("");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("uh>Cc(@ygZW");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("uh$>Cc(@ygZW");
      StringBuilder stringBuilder0 = new StringBuilder("uh$>Cc(@ygZW");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 1533, document_OutputSettings1);
      assertEquals("uh$>Cc(@ygZW<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document(" ");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("br");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      document0.prependChild(formElement0);
      StringBuilder stringBuilder0 = new StringBuilder("br");
      formElement0.outerHtml(stringBuilder0);
      assertEquals("br\n<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 37, document_OutputSettings0);
      formElement0.outerHtmlHead(stringBuilder0, 37, document_OutputSettings0);
      assertEquals("</textarea>\n                                     <textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("*\"EuZ,%BN");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-1195), document_OutputSettings1);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 2231, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      FormElement formElement1 = (FormElement)formElement0.val("textarea");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement1.outerHtmlTail(stringBuilder0, 37, document_OutputSettings0);
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("</textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("textarea");
      StringBuilder stringBuilder0 = new StringBuilder();
      formElement0.prependText("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 1, document_OutputSettings1);
      assertEquals(2, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("*\"EuZ,%BN");
      document0.hashCode();
  }
}
