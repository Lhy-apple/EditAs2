/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:48:48 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("h2", "", "", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead((Appendable) null, (byte) (-71), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.DocumentType", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("VHv>%3", "VHv>%3", "PX>v:=RHIlq*pPH", "PX>v:=RHIlq*pPH");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE VHv>%3 PUBLIC \"VHv>%3\" \"PX>v:=RHIlq*pPH\">", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("*%uv-", "*%uv-", "*%uv-", "*%uv-");
      MockFile mockFile0 = new MockFile("SYSTEM", "SYSTEM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "Y8", "", "q}wW7>26 xt^q");
      StringBuilder stringBuilder0 = new StringBuilder("Y8");
      Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
      documentType0.outerHtmlHead(stringBuilder0, 2518, document_OutputSettings0);
      assertEquals("Y8<!DOCTYPE PUBLIC \"Y8\">", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      DocumentType documentType0 = new DocumentType("ID6", "", "[vz$A{yw&(", "6F<mnSlR8&;P3,K=IUQ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(outputStreamWriter0, 3673, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }
}
