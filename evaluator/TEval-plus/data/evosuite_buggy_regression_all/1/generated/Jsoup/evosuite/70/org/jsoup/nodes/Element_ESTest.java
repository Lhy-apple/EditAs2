/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:51:56 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("+Z>`'%Mq");
      // Undeclared exception!
      try { 
        document0.wrap("+Z>`'%Mq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("F");
      document0.appendText("jGEZ?");
      document0.children();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("#root");
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("ZEI^+lR`m");
      assertFalse(document0.hasParent());
      
      document0.title("ZEI^+lR`m");
      String string0 = document0.text();
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZEI^+lR`m", string0);
      assertEquals("ZEI^+lR`m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("z*t+bi");
      // Undeclared exception!
      try { 
        document0.child(488);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 488, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document(".");
      Element element0 = document0.prependText(".");
      assertEquals(".", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("UEI^+lR`m");
      Element element0 = document0.tagName("UEI^+lR`m");
      assertEquals("UEI^+lR`m", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("meta");
      document0.dataset();
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("meta", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell(")6Pw");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("F");
      Element element0 = document0.attr("F", false);
      assertEquals("F", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("ZEI^+lR`m");
      document0.getElementsByAttributeValue("=", "org.jsoup.select.Evaluator$AttributeWithValueMatching");
      assertEquals("ZEI^+lR`m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      assertFalse(document0.hasParent());
      
      document0.getElementsByAttributeValueStarting(" />", " />");
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("ZEI2+lR<");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      String string0 = document0.html();
      assertEquals("ZEI2+lR<", document0.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("qc:");
      document0.prepend("qc:");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("no/Y\rks");
      Elements elements0 = document0.getElementsMatchingOwnText("no/Y\rks");
      assertEquals(1, document0.childNodeSize());
      assertEquals("no/Y\rks", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      Elements elements0 = document0.getElementsByIndexLessThan((-157));
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("f}TWyw+OR~i");
      document0.getElementsByAttributeStarting("f}TWyw+OR~i");
      assertEquals("f}TWyw+OR~i", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Elements elements0 = document0.getElementsByIndexEquals((-1110026255));
      assertEquals(":matches(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueMatching("P1F", "P1F");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      document0.is((Evaluator) evaluator_IsLastOfType0);
      assertEquals("s+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      document0.getElementsByAttributeValueEnding(":matches(", ":matches(");
      assertEquals(":matches(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Elements elements0 = document0.getElementsByClass(":matches(");
      assertTrue(elements0.isEmpty());
      
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals(":matches(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xOS'7J<,cle");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "xOS'7J<,cle", attributes0);
      Elements elements0 = formElement0.getElementsContainingText("xOS'7J<,cle");
      assertEquals("xOS'7J<,cle", formElement0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining(":matches(", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("U0WoVY7^{7)j");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("sIs[n:GjQ-2Uk0");
      document0.doSetBaseUri("sIs[n:GjQ-2Uk0");
      assertEquals("sIs[n:GjQ-2Uk0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("    ");
      Document document1 = document0.clone();
      assertEquals("    ", document1.baseUri());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("EP\\+dfFO9q");
      Element element0 = document0.shallowClone();
      assertEquals("EP\\+dfFO9q", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("ZEI2+lR<");
      document0.appendTo(document0);
      Element element0 = document0.text("ZEI2+lR<");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("q=}+4Xv2)");
      document0.getElementsByAttributeValueNot("q=}+4Xv2)", "q=}+4Xv2)");
      assertEquals("q=}+4Xv2)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.TextNode");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("org.jsoup.nodes.TextNode", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("#aooo");
      document0.getElementsByAttribute("#aooo");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#aooo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("ss[n:GjQ-2Uk0");
      // Undeclared exception!
      try { 
        document0.before("ss[n:GjQ-2Uk0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("Ig+lqJ(WYu|Q?q:J/");
      Element element0 = document0.removeClass("Ig+lqJ(WYu|Q?q:J/");
      assertEquals("Ig+lqJ(WYu|Q?q:J/", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("+Z>`'%M0");
      document0.getAllElements();
      assertEquals("+Z>`'%M0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("f}TWyw+OR~i");
      // Undeclared exception!
      try { 
        document0.is("f}TWyw+OR~i");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'f}TWyw+OR~i': unexpected token at '}TWyw+OR~i'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000011 java.lang.string@0000000010 queue did not match textarea sequence queue did not class expected sequence");
      // Undeclared exception!
      try { 
        document0.selectFirst("java.lang.string@0000000011 java.lang.string@0000000010 queue did not match textarea sequence queue did not class expected sequence");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'java.lang.string@0000000011 java.lang.string@0000000010 queue did not match textarea sequence queue did not class expected sequence': unexpected token at '@0000000011 java.lang.string@0000000010 queue did not match textarea sequence queue did not class expected sequence'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Elements elements0 = document0.getElementsByIndexGreaterThan(28);
      assertEquals(1, document0.childNodeSize());
      assertEquals(":matches(", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.body();
      element0.after("java.lang.string@0000000012 insert position out of bounds. insert tep&arua out of bounds.");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("s+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("+Z>`'%U0");
      Element element0 = document0.body();
      element0.html("+Z>`'%U0");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.append("9=hX");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.TextNode");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("org.jsoup.nodes.TextNode", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("ZEI^+lR`m");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("ZEI^+lR`m", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("goQ8S3&4uH-^(Q");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2791), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("pr");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(96, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("+Z>`'%M0");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("+Z>`'%M0", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("ZEI^+lR`m");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1602), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(19, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.toggleClass("Insert position out of bounds.");
      element0.cssSelector();
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("s+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      document0.siblingElements();
      assertEquals(":matches(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("Must be false");
      document0.appendChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertEquals("Must be false", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Element element0 = document0.prependChild(document0);
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("Must be false");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertEquals("Must be false", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("AIs[n:GjQ-2U0");
      document0.previousElementSibling();
      assertEquals("AIs[n:GjQ-2U0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = document0.normalise();
      document0.appendChild(document1);
      document0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("Must be f/alse");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      assertEquals("Must be f/alse", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.appendTo(document0);
      document0.firstElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("");
      document0.reparentChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals("org.jsoup.nodes.TextNode", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("sIs[n:GjQ-2Uk0");
      document0.reparentChild(document0);
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("sIs[n:GjQ-2Uk0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("xOS'7J<,cle");
      Element element0 = document0.getElementById("xOS'7J<,cle");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("xOS'7J<,cle", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      DocumentType documentType0 = new DocumentType(":matches(", ":matches(", "Q%>r5", "Q%>r5");
      document0.appendChild(documentType0);
      document0.text();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000009");
      DataNode dataNode0 = new DataNode("kqmMr&+|s!R:70", "java.lang.string@0000000009");
      document0.appendChild(dataNode0);
      document0.getElementsContainingOwnText("java.lang.string@0000000009");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("ZEI^+lR`m");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("br");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comment comment0 = new Comment(" > ");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("<gjoli3B");
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertEquals("<gjoli3B", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("    ");
      Document document1 = document0.normalise();
      document0.text("    ");
      boolean boolean0 = document1.hasText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Element element0 = document0.appendText(":matches(");
      boolean boolean0 = element0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.combiningevaluator$or", "b&&]#[?-mYufNe_\"L!");
      Element element0 = document0.appendChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertEquals(1, dataNode0.siblingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Element element0 = document0.text(":matches(");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(":matches(", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.combiningevaluator$or", "b&&]#[?-mYufNe_\"L!");
      document0.appendChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Comment comment0 = new Comment("body", "M/{F &![2;");
      document0.appendChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Element element0 = document0.text(":matches(");
      element0.data();
      assertEquals(":matches(", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.addClass("Insert position out of bounds.");
      Elements elements0 = document0.getElementsByClass("java.lang.string@0000000010");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("+Z>`'%M0");
      document0.addClass("+Z>`'%M0");
      Elements elements0 = document0.getElementsByClass("java.lang.string@0000000011 queu did ot match multiple sequence");
      assertEquals("+Z>`'%M0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000010 insert position ot of ounds.");
      Element element0 = document0.toggleClass("java.lang.string@0000000010 insert position ot of ounds.");
      document0.addClass("java.lang.string@0000000010 insert position ot of ounds.");
      Elements elements0 = element0.getElementsByClass("java.lang.string@0000000010");
      assertEquals(1, elements0.size());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("ZEI^+lR`m");
      document0.toggleClass("ZEI^+lR`m");
      document0.addClass("<html>\n <head></head>\n <body></body>\n</html>");
      document0.getElementsByClass("=");
      assertEquals("ZEI^+lR`m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("value");
      Element element0 = document0.toggleClass("value");
      element0.addClass("");
      document0.getElementsByClass("\"#O}_QB#bzNL%v!8aX");
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("nzz8Uo n.");
      document0.toggleClass("queue did not match expected sequence");
      document0.addClass("queue did not match expected sequence");
      Elements elements0 = document0.getElementsByClass("/&KS1nU)");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("Wfx8ja~c&5gm;>");
      Element element0 = document0.toggleClass("Wfx8ja~c&5gm;>");
      document0.toggleClass("Wfx8ja~c&5gm;>");
      Element element1 = element0.toggleClass("Wfx8ja~c&5gm;>");
      assertEquals("Wfx8ja~c&5gm;>", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("EP\\+dfFO9q");
      document0.val();
      assertEquals("EP\\+dfFO9q", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "j7", attributes0);
      element0.val();
      assertEquals("j7", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Element element0 = document0.val(":matches(");
      assertEquals(1, element0.childNodeSize());
      assertEquals(":matches(", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.val("noQuirks");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell("ZEI2+lR<");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("ZEI2+lR<", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("ZEI^+lR`m");
      document0.title("ZEI^+lR`m");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head>\n  <title>ZEI^+lR`m</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("ZEI^+lR`m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell("xOS'7J<,cle");
      MockFile mockFile0 = new MockFile("xOS'7J<,cle");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      document0.html(mockFileWriter0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("xOS'7J<,cle", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Element element0 = new Element("EP\\+dfF9q>");
      Element element1 = element0.doClone((Node) null);
      assertNotSame(element1, element0);
  }
}
