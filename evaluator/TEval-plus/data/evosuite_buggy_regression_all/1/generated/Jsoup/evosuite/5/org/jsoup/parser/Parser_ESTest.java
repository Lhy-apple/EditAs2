/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:46:01 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<?", "<?");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertEquals("<![CDATA[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Guog#z<CaMF@55='xM]E", "Guog#z<CaMF@55='xM]E");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("GU<p3(E</Z57B|{2W", "GU<p3(E</Z57B|{2W");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("<!O--", "<!O--");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("E#z<CBMb@K5=G xM!]@", "E#z<CBMb@K5=G xM!]@");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed("D'@<Hf=\"AQmy%YEc!\"", ")?<!--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("<E=4^/'H<BPCd", "<E=4^/'H<BPCd");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parse("G#z<Oi.j57=cGQxgE", "G#z<Oi.j57=cGQxgE");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f-:!8i<;Uugt[L", "f-:!8i<;Uugt[L");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("T<o(&~?Er/prd<J\"_X", "T<o(&~?Er/prd<J\"_X");
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G4z</jK7c2gE", "G4z</jK7c2gE");
      assertEquals("#document", document0.nodeName());
  }
}
