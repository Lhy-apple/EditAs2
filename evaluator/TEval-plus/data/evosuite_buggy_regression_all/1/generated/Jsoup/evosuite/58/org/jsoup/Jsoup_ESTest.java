/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:48:57 GMT 2023
 */

package org.jsoup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Jsoup_ESTest extends Jsoup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Jsoup.parseBodyFragment("org.jsoup.Jsoup");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Jsoup.parse("org.jsoup.Jsoup", "dS}Bw");
      assertEquals("dS}Bw", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string0 = Jsoup.clean("dS}Bw", whitelist0);
      assertEquals("dS}Bw", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Jsoup.parse("org.jsoup.Jsoup");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Jsoup.clean("]#Ab7GBk+0DOi}l(~", "?'P)a>|", whitelist0, document_OutputSettings0);
      assertEquals("]#Ab7GBk+0DOi}l(~", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) sequenceInputStream0, "", " uH@<%/", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "7 2%uD`0RNc~K,\u0001c", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockRandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      boolean boolean0 = Jsoup.isValid("PUBLIC", whitelist0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("VOrv-NlDA[q-G]T", "dS}Bw");
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "!%)Ol]XN9<P");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !%)Ol]XN9<P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      try { 
        Jsoup.parse(uRL0, 3000);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Jsoup.parse("ol", "dt", parser0);
      assertEquals("dt", document0.location());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.connect("*ox:}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: *ox:}
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("d0r(\"x}", "d0r(\"x}");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) mockFileInputStream0, "d0r(\"x}", "%jRC's~N|J+Q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // d0r(\"x}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
