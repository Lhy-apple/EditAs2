/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:47:14 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("R&", "R&");
      String string0 = textNode0.absUrl("R&");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("#@-", "#@-");
      dataNode0.setBaseUri("#@-");
      assertEquals(0, (int)dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("R&", "R&");
      Node node0 = textNode0.removeAttr("R&");
      assertEquals(0, (int)node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("R&", "R&");
      textNode0.toString();
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Element element0 = document0.html("\n");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#@-", "#@-");
      // Undeclared exception!
      try { 
        dataNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("R&", "R&");
      Node node0 = textNode0.clone();
      assertNotSame(node0, textNode0);
      assertNotNull(node0);
      assertEquals(0, (int)node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("RightTeeVector");
      assertEquals(0, (int)document0.siblingIndex());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("bms", "bms");
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("bms", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      // Undeclared exception!
      try { 
        dataNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("R&", "R&");
      assertEquals("R&", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("R&", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:", "abs:");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("abs:", dataNode0.baseUri());
      assertNotNull(dataNode0);
      
      // Undeclared exception!
      try { 
        dataNode0.attr("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("`HI%/");
      assertEquals("`HI%/", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.attr("`HI%/", "`HI%/");
      assertEquals("`HI%/", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("`HI%/", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      String string0 = document0.absUrl("`HI%/");
      assertEquals("", string0);
      assertEquals("`HI%/", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("#@-", "#@-");
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("#@-", dataNode0.baseUri());
      assertNotNull(dataNode0);
      
      Document document0 = Document.createShell("#@-");
      assertEquals("#@-", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendChild(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("#@-", dataNode0.baseUri());
      assertEquals(1, (int)dataNode0.siblingIndex());
      assertEquals("#@-", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("#@-", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      dataNode0.setParentNode(element0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("#@-", dataNode0.baseUri());
      assertEquals(1, (int)dataNode0.siblingIndex());
      assertEquals("#@-", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("#@-", element0.baseUri());
      assertSame(document0, element0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataNode dataNode0 = new DataNode("di<k;v", "di<k;v");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("di<k;v", dataNode0.baseUri());
      assertNotNull(dataNode0);
      
      Document document0 = new Document("di<k;v");
      assertEquals("#document", document0.nodeName());
      assertEquals("di<k;v", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependChild(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("di<k;v", dataNode0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("di<k;v", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals("di<k;v", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      dataNode0.replaceWith(element0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("di<k;v", dataNode0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("di<k;v", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals("di<k;v", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertSame(document0, element0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.appendChild(document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("[jeRU(Qdp1NPx1RBt!q");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("[jeRU(Qdp1NPx1RBt!q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("[jeRU(Qdp1NPx1RBt!q", "[jeRU(Qdp1NPx1RBt!q");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("[jeRU(Qdp1NPx1RBt!q", textNode0.baseUri());
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) textNode0;
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("[jeRU(Qdp1NPx1RBt!q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("[jeRU(Qdp1NPx1RBt!q", textNode0.baseUri());
      assertEquals("[jeRU(Qdp1NPx1RBt!q", document0.parentNode.baseUri());
      assertEquals(0, (int)document0.parentNode.siblingIndex());
      
      Node node0 = document0.previousSibling();
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("[jeRU(Qdp1NPx1RBt!q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.appendChild(document0);
      assertFalse(document0.isBlock());
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(1, (int)element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      Element element1 = (Element)document0.previousSibling();
      assertFalse(document0.isBlock());
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("~@-", "~@-");
      assertEquals("~@-", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      boolean boolean0 = dataNode0.equals("~@-");
      assertFalse(boolean0);
      assertEquals("~@-", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("{vXJ@e+YD({t,J5 RYF", "{vXJ@e+YD({t,J5 RYF");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      boolean boolean0 = dataNode0.equals(dataNode0);
      assertTrue(boolean0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#@-", "#@-");
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#@-", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      TextNode textNode0 = TextNode.createFromEncoded("#@-", "#@-");
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#@-", textNode0.baseUri());
      assertNotNull(textNode0);
      
      dataNode0.parentNode = (Node) textNode0;
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#@-", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#@-", textNode0.baseUri());
      assertEquals("#@-", dataNode0.parentNode.baseUri());
      assertEquals(0, (int)dataNode0.parentNode.siblingIndex());
      
      dataNode0.hashCode();
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#@-", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("#@-");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#@-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.clone();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#@-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#@-", element0.baseUri());
      assertEquals("#document", element0.nodeName());
      assertNotNull(element0);
      assertFalse(element0.equals((Object)document0));
      assertNotSame(document0, element0);
      assertNotSame(element0, document0);
  }
}
